use strict;
use warnings;
use Test::More;

use Math::Symbolic qw/parse_from_string/;

my @expressions = (
'0',
'1',
'10^(a(x)*a(x))',
'1+1/5*log(2,3)^5',
#'1+1/5*log(2,a)^5',
'1+2',
'1+2*(-5)^log(2,4)',
'(1 + -2 * 7/(5+2) * 2^(3-1)) * d',
'1/2 * m * v^2',
'1.5',
'1.5*a',
'1*a',
'1*a+(-b)-3*sin(2)',
#'(1+t)^log(t*2,x^2)',
'-2',
'2',
'2000',
'2000*2000',
'2*2',
'(2+2)*2',
'2-2+2-2',
'2*c',
'2*x+y+3*z',
'3*x+sin(y)^(z+1)',
'3*y^z',
'4-3',
'4-4',
'5^log(2,4)',
'9.8',
'a',
'a / (2 * 5)',
'a^2 + b * c * 2',
'a*a',
'a-a+a-a-a',
'---(a-b)',
'--(a-b)',
'a*b+a*c',
'a*b^c',
'a(b, c, d)',
#'acosh(x)',
#'acos(x)',
#'acot(x)',
#'asinh(x)',
#'asin(x)',
#'atan(x)',
'-BLABLAIdent_1213_ad',
#'cosh(2)',
'cos(omega*t - phase)',
'cos(sin(1+2*-5^log(2,4)))',
'cot(x)',
'd*acos(cos(1))',
'e^(i*omega*t)',
'E_pot(r, t) + 1/2 * m(t) * v(t)^2',
'exp(a*b)',
'I_max',
'K-C*exp(-L*x)',
'K+-C*exp(-L*x)',
'R + i*omega*L',
'sinh(2)',
'sin(x)',
'sin(x)*var+3*y^z-var*x',
'sqrt(a*b)',
#'tan(log(cosh(2),sin(2*1*3+1*3)*sinh(0)))',
'tan(x)',
'U_max',
'x',
'x + (-5)*y',
'x_initial + v_x_initial * t',
"x+x^2",
"((x+x^2)+3)-3",
'x*y',
'(x*y)^2',
'(x*y^3)',
'(x*y)^(a*b)',
'(y)^(a*b)',
'y_initial + v_y_initial * t - (g*t^2)/2',
'-1+-(-1+x) - (-5)*y',
'sin(x)*sin(x)',
'x+x+x+x',
'x-x+x-x',
'x*x+x*x',
'2*x*x-x*x',
);
plan tests => scalar(@expressions);

foreach my $expr (@expressions) {
  #diag($expr);
  my $f = parse_from_string($expr);
  my $fs = $f->simplify;

  ok($f->test_num_equiv($fs), "Expr: $expr");
}

